<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Page - Edit Product</title>
    <link rel="stylesheet" href="/styles/editProduct.css">
</head>
<body>
  <div class="admin-container">
    <a href="/admin/dashboard#products" class="back-btn">← Back to Dashboard</a>
        <h1>Edit Product</h1>
        <form id="productForm">
            <div class="form-group">
                <label for="name">Product Name:</label>
                <input type="text" id="name" name="name" value="<%= product.name %>" required>
            </div>

            <div class="form-group">
                <label for="price">Price:</label>
                <input type="number" id="price" name="price" step="0.01" value="<%= product.price %>" required>
            </div>

            <div class="form-group">
                <label for="type">Type:</label>
                <select id="type" name="type" required class="form-select">
                    <option value="">Select Type</option>
                    <option value="album" <%= product.type === 'album' ? 'selected' : '' %>>Album</option>
                    <option value="lightstick" <%= product.type === 'lightstick' ? 'selected' : '' %>>Lightstick</option>
                    <option value="merchandise" <%= product.type === 'merchandise' ? 'selected' : '' %>>Merchandise</option>
                </select>
            </div>

            <div class="form-group">
                <label for="availability">Availability:</label>
                <select id="availability" name="availability" required class="form-select">
                    <option value="">Select Availability</option>
                    <option value="pre-order" <%= product.availability === 'pre-order' ? 'selected' : '' %>>Pre-order</option>
                    <option value="on-hand" <%= product.availability === 'on-hand' ? 'selected' : '' %>>On-hand</option>
                </select>
            </div>

            <div class="form-group">
                <label for="artist">Artist:</label>
                <input type="text" id="artist" name="artist" value="<%= product.artist %>" required>
            </div>

            <div id="descriptionsContainer">
                <h2>Descriptions</h2>
                <% product.description.forEach((desc, index) => { %>
                    <div class="description-container">
                        <div class="description-header">
                            <h3>Description <%= index + 1 %></h3>
                            <button type="button" class="remove-btn" onclick="removeDescription(this)">Remove</button>
                        </div>
                        <div class="form-group">
                            <textarea name="descriptions[]" required><%= desc %></textarea>
                        </div>
                    </div>
                <% }); %>
            </div>
            <button type="button" class="add-description-btn" onclick="addDescription()">Add Another Description</button>

            <div id="inclusionsContainer">
                <h2>Inclusions</h2>
                <% product.inclusions.forEach((inclusion, index) => { %>
                    <div class="inclusion-container">
                        <div class="inclusion-header">
                            <h3>Inclusion <%= index + 1 %></h3>
                            <button type="button" class="remove-btn" onclick="removeInclusion(this)">Remove</button>
                        </div>
                        <div class="form-group">
                            <textarea name="inclusions[]" required><%= inclusion %></textarea>
                        </div>
                    </div>
                <% }); %>
            </div>
            <button type="button" class="add-inclusion-btn" onclick="addInclusion()">Add Another Inclusion</button>

            <div class="form-group">
                <label for="imageH">Main Image:</label>
                <div id="mainImageContainer" class="current-image">
                    <% if (product.imageH) { %>
                        <div class="image-container">
                            <button type="button" class="delete-image-btn" onclick="deleteMainImage()">×</button>
                            <img src="<%= product.imageH %>" alt="Current main image">
                        </div>
                    <% } %>
                </div>
                <input type="file" id="imageH" name="imageH" accept="image/*">
                <img id="imageHPreview" class="image-preview" src="#" alt="Main Image Preview" style="display: none;">
            </div>

             <div id="versionsContainer">
        <h2>Versions</h2>
        <% product.versions.forEach((version, index) => { %>
            <div class="version-container">
                <div class="version-header">
                    <h3>Version <%= index + 1 %></h3>
                    <button type="button" class="remove-btn" onclick="removeVersion(this)">Remove</button>
                </div>
                <div class="form-group">
                    <label for="version<%= index + 1 %>">Version Name:</label>
                    <input type="text" id="version<%= index + 1 %>" name="versions[<%= index %>][version]" value="<%= version.version %>" required>
                </div>
                <div class="form-group">
                    <label for="quantity<%= index + 1 %>">Quantity:</label>
                    <input type="number" id="quantity<%= index + 1 %>" name="versions[<%= index %>][quantity]" value="<%= version.quantity %>" required>
                </div>
                <div class="form-group">
                    <label for="image<%= index + 1 %>">Version Images:</label>
                    <div class="current-version-images" id="versionImagesContainer<%= index %>">
                        <% version.image.forEach((img, imgIndex) => { %>
                            <div class="image-container">
                                <button type="button" class="delete-image-btn" 
                                    onclick="deleteVersionImage(<%= index %>, <%= imgIndex %>)">×</button>
                                <img src="<%= img %>" alt="Current version image">
                            </div>
                        <% }); %>
                    </div>
                    <input type="file" id="image<%= index + 1 %>" name="versions[<%= index %>][image]" accept="image/*" multiple>
                    <div id="imagePreview<%= index + 1 %>" class="image-preview"></div>
                </div>
            </div>
        <% }); %>
    </div>

            <button type="button" class="add-version-btn" onclick="addVersion()">Add Another Version</button>

            <button type="submit" class="submit-btn">Confirm Edit</button>
        </form>
    </div>

    <script>
        let versionCount = <%= product.versions.length %>;
        let descriptionCount = <%= product.description.length %>;
        let inclusionCount = <%= product.inclusions.length %>;

        let deletedMainImage = false;
        const deletedVersionImages = {};

        function deleteMainImage() {
            const mainImageContainer = document.getElementById('mainImageContainer');
            const imageInput = document.getElementById('imageH');
            
            // Clear existing images
            mainImageContainer.innerHTML = '';
            
            // Create a hidden input to track deletion
            const deletedImageInput = document.createElement('input');
            deletedImageInput.type = 'hidden';
            deletedImageInput.name = 'deleteMainImage';
            deletedImageInput.value = 'true';
            mainImageContainer.appendChild(deletedImageInput);
            
            // Mark that main image has been deleted
            deletedMainImage = true;
        }

        function deleteVersionImage(versionIndex, imageIndex) {
            const versionImagesContainer = document.getElementById(`versionImagesContainer${versionIndex}`);
            const imageToDelete = versionImagesContainer.querySelector(`.image-container:nth-child(${imageIndex + 1})`);
            
            // Remove the image from the display
            imageToDelete.remove();
            
            // Initialize the deleted images tracking for this version if not exists
            if (!deletedVersionImages[versionIndex]) {
                deletedVersionImages[versionIndex] = [];
            }
            
            // Add a hidden input to track deleted images
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = `versions[${versionIndex}][deletedImages][]`;
            hiddenInput.value = `true`;
            versionImagesContainer.appendChild(hiddenInput);
        }

        // Reuse the same functions from addProduct.ejs
        function addVersion() {
            versionCount++;
            const versionsContainer = document.getElementById('versionsContainer');
            const newVersion = document.createElement('div');
            newVersion.className = 'version-container';
            newVersion.innerHTML = `
                <div class="version-header">
                    <h3>Version ${versionCount}</h3>
                    <button type="button" class="remove-btn" onclick="removeVersion(this)">Remove</button>
                </div>
                <div class="form-group">
                    <label for="version${versionCount}">Version Name:</label>
                    <input type="text" id="version${versionCount}" name="versions[${versionCount - 1}][version]" required>
                </div>
                <div class="form-group">
                    <label for="quantity${versionCount}">Quantity:</label>
                    <input type="number" id="quantity${versionCount}" name="versions[${versionCount - 1}][quantity]" required>
                </div>
                <div class="form-group">
                    <label for="image${versionCount}">Version Images:</label>
                    <input type="file" id="image${versionCount}" name="versions[${versionCount - 1}][image]" accept="image/*" multiple required>
                    <div id="imagePreview${versionCount}" class="image-preview"></div>
                </div>
            `;
            versionsContainer.appendChild(newVersion);
        }

        function addDescription() {
            descriptionCount++;
            const descriptionsContainer = document.getElementById('descriptionsContainer');
            const newDescription = document.createElement('div');
            newDescription.className = 'description-container';
            newDescription.innerHTML = `
                <div class="description-header">
                    <h3>Description ${descriptionCount}</h3>
                    <button type="button" class="remove-btn" onclick="removeDescription(this)">Remove</button>
                </div>
                <div class="form-group">
                    <textarea name="descriptions[]" required></textarea>
                </div>
            `;
            descriptionsContainer.appendChild(newDescription);
        }

        function addInclusion() {
            inclusionCount++;
            const inclusionsContainer = document.getElementById('inclusionsContainer');
            const newInclusion = document.createElement('div');
            newInclusion.className = 'inclusion-container';
            newInclusion.innerHTML = `
                <div class="inclusion-header">
                    <h3>Inclusion ${inclusionCount}</h3>
                    <button type="button" class="remove-btn" onclick="removeInclusion(this)">Remove</button>
                </div>
                <div class="form-group">
                    <textarea name="inclusions[]" required></textarea>
                </div>
            `;
            inclusionsContainer.appendChild(newInclusion);
        }

        function removeVersion(button) {
            button.closest('.version-container').remove();
        }

        function removeDescription(button) {
            button.closest('.description-container').remove();
        }

        function removeInclusion(button) {
            button.closest('.inclusion-container').remove();
        }

        document.getElementById('imageH').addEventListener('change', function(event) {
            const file = event.target.files[0];
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.getElementById('imageHPreview');
                preview.src = e.target.result;
                preview.style.display = 'block';
            }
            reader.readAsDataURL(file);
        });

        // Modified form submission for editing
    document.getElementById('productForm').addEventListener('submit', async function(e) {
    e.preventDefault();
        const formData = new FormData();
        
        // Add product ID
        const productId = '<%= product._id %>';
        
        // Collect product data
        const productData = {
            name: document.getElementById('name').value,
            price: parseFloat(document.getElementById('price').value),
            type: document.getElementById('type').value,
            availability: document.getElementById('availability').value,
            artist: document.getElementById('artist').value,
            description: [], // Will be filled below
            inclusions: [], // Will be filled below
            versions: [], // Will be filled below
            deletedMainImage: deletedMainImage // Track main image deletion
        };

        // Collect descriptions (only from existing containers)
        const descriptionContainers = document.querySelectorAll('.description-container');
        descriptionContainers.forEach(container => {
            const textarea = container.querySelector('textarea');
            if (textarea && textarea.value.trim()) {
                productData.description.push(textarea.value.trim());
            }
        });

        // Collect inclusions (only from existing containers)
        const inclusionContainers = document.querySelectorAll('.inclusion-container');
        inclusionContainers.forEach(container => {
            const textarea = container.querySelector('textarea');
            if (textarea && textarea.value.trim()) {
                productData.inclusions.push(textarea.value.trim());
            }
        });

        // Get the main image if it exists
        const mainImage = document.getElementById('imageH').files[0];
        if (mainImage) {
            formData.append('imageH', mainImage);
        }

        // Collect versions data (only from existing containers)
        const versionContainers = document.querySelectorAll('.version-container');
        versionContainers.forEach((container, index) => {
            const versionInput = container.querySelector('input[type="text"]');
            const quantityInput = container.querySelector('input[type="number"]');
            const fileInput = container.querySelector('input[type="file"]');
            const existingImages = container.querySelectorAll('.current-image img');
            
            if (versionInput && quantityInput) {
                const versionData = {
                    version: versionInput.value,
                    quantity: parseInt(quantityInput.value),
                    image: [], // Existing images
                    deletedImages: deletedVersionImages[index] || [] // Track deleted version images
                };

                // Handle images
                if (fileInput && fileInput.files.length > 0) {
                    // If new images are selected
                    for (let i = 0; i < fileInput.files.length; i++) {
                        formData.append(`versionImages_${index}`, fileInput.files[i]);
                    }
                } else {
                    // Keep existing images
                    versionData.image = Array.from(existingImages).map(img => {
                        // Extract the path from the src attribute
                        const src = img.getAttribute('src');
                        return src.startsWith('http') ? src.split(window.location.origin)[1] : src;
                    });
                }

                productData.versions.push(versionData);
            }
        });

        // Add the product data as JSON
        formData.append('productData', JSON.stringify(productData));

        try {
            const response = await fetch(`/admin/edit-product/${productId}`, {
                method: 'PUT',
                body: formData
            });

            const result = await response.json();
            
            if (result.success) {
                alert('Product updated successfully!');
                window.location.href = '/admin/dashboard';
            } else {
                alert('Error updating product: ' + result.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('Error updating product');
        }
    });

// Update the remove functions to actually remove the elements
function removeVersion(button) {
    if (confirm('Are you sure you want to remove this version?')) {
        const container = button.closest('.version-container');
        container.remove();
    }
}

function removeDescription(button) {
    if (confirm('Are you sure you want to remove this description?')) {
        const container = button.closest('.description-container');
        container.remove();
    }
}

function removeInclusion(button) {
    if (confirm('Are you sure you want to remove this inclusion?')) {
        const container = button.closest('.inclusion-container');
        container.remove();
    }
}
    </script>
</body>
</html>