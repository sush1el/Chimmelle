<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Montserrat', sans-serif;
        }

        body {
            background-color: #fff7f7;
            color: #333;
            display: flex;
        }

        .sidebar {
            width: 250px;
            height: 100vh;
            background-color: #da9e9f;
            padding: 20px;
            display: flex;
            flex-direction: column;
            position: fixed;
        }

        .sidebar h1 {
            color: #fff;
            font-size: 24px;
            margin-bottom: 30px;
            text-align: center;
        }

        .sidebar-nav {
            list-style-type: none;
            flex-grow: 1;
        }

        .sidebar-nav li {
            margin-bottom: 10px;
        }

        .sidebar-nav a {
            color: #fff;
            text-decoration: none;
            font-size: 18px;
            display: block;
            padding: 10px;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .sidebar-nav a:hover,
        .sidebar-nav a.active {
            background-color: #c78081;
        }

        .logout-container {
            margin-top: auto;
            border-top: 2px solid rgba(255, 255, 255, 0.1);
            padding-top: 20px;
        }

        .logout-btn {
            width: 100%;
            padding: 12px;
            background-color: #c78081;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: background-color 0.3s;
        }

        .createAdminBtn {
            width: 100%;
            padding: 12px;
            background-color: #c78081;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            transition: background-color 0.3s;
        }

        .logout-btn:hover {
            background-color: #b66e6f;
        }

        .main-content {
            flex-grow: 1;
            padding: 20px;
            margin-left: 250px;
        }

        .section {
            background-color: #fff;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        h2 {
            color: #da9e9f;
            margin-bottom: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        .btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: #da9e9f;
            color: #fff;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .btn:hover {
            background-color: #c78081;
        }

        .btn-add {
            margin-bottom: 20px;
        }

        .empty-message {
            text-align: center;
            color: #777;
            font-style: italic;
        }
        
        
        #role.swal2-input {
          height: 40px;
          padding: 8px;
        }
        
        .btn-primary {
          background-color: #007bff;
          color: white;
          padding: 10px 20px;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        
        .btn-primary:hover {
          background-color: #0056b3;
        }

        .swal2-input {
          margin: 10px auto;
          width: 80%;
        }

        #manage-admins {
            display: none;
        }
        
        #manage-admins.active {
            display: block;
        }
        
        .admin-card {
            background-color: #fff;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .admin-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .admin-info {
            margin-bottom: 10px;
        }

        .admin-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        .admin-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <nav class="sidebar">
        <h1>Admin Dashboard</h1>
        <ul class="sidebar-nav">
            <li><a href="#products" class="active">Products</a></li>
            <li><a href="#orders">Orders</a></li>
            <% if (admin.role === 'super_admin') { %>
                <li><a href="#manage-admins" class="nav-link">Manage Admins</a></li>
            <% } %>
        </ul>
        
        <div class="logout-container">
            <button onclick="logout()" class="logout-btn">
                <i class="fas fa-sign-out-alt"></i>
                Logout
            </button>
        </div>
    </nav>

    <main class="main-content">
        <section id="products" class="section">
            <h2>Products</h2>
            <a href="/admin/add-product" class="btn btn-add">Add New Product</a>
            <table>
                <thead>
                    <tr>
                        <th>Image</th>
                        <th>Product Name</th>
                        <th>Price</th>
                        <th>Type</th>
                        <th>Artist</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (products && products.length > 0) { %>
                        <% products.forEach(product => { %>
                            <tr>
                                <td>
                                    <img src="<%= product.imageH %>" alt="<%= product.name %>" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;">
                                </td>
                                <td><%= product.name %></td>
                                <td>â‚± <%= product.price.toLocaleString() %></td>
                                <td><%= product.type %></td>
                                <td><%= product.artist %></td>
                                <td>
                                    <a href="/admin/edit-product/<%= product._id %>" class="btn">Edit</a>
                                    <button onclick="deleteProduct('<%= product._id %>')" class="btn" style="background-color: #ff4d4d;">Delete</button>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="6" class="empty-message">No products available.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </section>

        <section id="orders" class="section">
            <h2>Orders</h2>
            <p class="empty-message">No orders available at the moment.</p>
        </section>

         <!-- New Manage Admins section -->
         <% if (admin.role === 'super_admin') { %>
            <section id="manage-admins" class="section">
                <div class="admin-header">
                    <h2>Manage Administrators</h2>
                    <button id="createAdminBtn" class="btn btn-add">
                        <i class="fas fa-user-plus"></i> Create New Admin
                    </button>
                </div>
                
                <div class="admin-grid">
                    <% admins.forEach(adminUser => { %>
                        <div class="admin-card">
                            <div class="admin-info">
                                <h3><%= adminUser.username %></h3>
                                <p><i class="fas fa-envelope"></i> <%= adminUser.email %></p>
                                <p><i class="fas fa-user-shield"></i> <%= adminUser.role %></p>
                                <p><i class="fas fa-clock"></i> Last Login: 
                                    <%= adminUser.lastLogin ? new Date(adminUser.lastLogin).toLocaleString() : 'Never' %>
                                </p>
                            </div>
                            <div class="admin-actions">
                                <% if (admin._id.toString() !== adminUser._id.toString()) { %>
                                    <button 
                                    onclick="deleteAdmin('<%= adminUser._id %>')" 
                                    class="btn delete-admin-btn">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                                <% } %>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </section>
            <% } %>
    </main>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get all nav links and sections
            const navLinks = document.querySelectorAll('.sidebar-nav a');
            const sections = document.querySelectorAll('.section');
    
            // Update active section based on hash
            function updateActiveSection() {
                const hash = window.location.hash || '#products';
    
                // Hide all sections first
                sections.forEach(section => section.style.display = 'none');
    
                // Remove active class from all links
                navLinks.forEach(link => link.classList.remove('active'));
    
                // Show the selected section
                const targetSection = document.querySelector(hash);
                if (targetSection) {
                    targetSection.style.display = 'block';
    
                    // Update active nav link
                    const activeLink = document.querySelector(`a[href="${hash}"]`);
                    if (activeLink) {
                        activeLink.classList.add('active');
                    }
                }
            }
    
            // Add click handlers to nav links
            navLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const href = link.getAttribute('href');
                    window.location.hash = href;
                    updateActiveSection();
                });
            });
    
            // Handle initial load and hash changes
            window.addEventListener('hashchange', updateActiveSection);
            updateActiveSection();
    
            // Create admin account functionality
            const createAdminBtn = document.getElementById('createAdminBtn');
            if (createAdminBtn) {
                createAdminBtn.addEventListener('click', () => {
                    const passwordRequirements = [
                        { regex: /.{8,}/, text: 'At least 8 characters long' },
                        { regex: /[A-Z]/, text: 'Contains uppercase letter' },
                        { regex: /[a-z]/, text: 'Contains lowercase letter' },
                        { regex: /[0-9]/, text: 'Contains number' },
                        { regex: /[!@#$%^&*(),.?":{}|<>]/, text: 'Contains special character' }
                    ];
    
                    let passwordValid = false;
    
                    Swal.fire({
                        title: 'Create Admin Account',
                        html: `
                            <input id="username" class="swal2-input" placeholder="Username">
                            <input id="email" class="swal2-input" placeholder="Email">
                            <div class="password-container">
                                <input id="password" type="password" class="swal2-input" placeholder="Password">
                                <ul id="password-requirements" style="text-align: left; margin: 10px auto; width: 80%; list-style: none; padding: 0;">
                                    ${passwordRequirements.map(req => `
                                        <li style="color: red; margin: 5px 0; font-size: 0.9em;">
                                            Ã— ${req.text}
                                        </li>
                                    `).join('')}
                                </ul>
                            </div>
                            <select id="role" class="swal2-input">
                                <option value="admin">Admin</option>
                                <option value="super_admin">Super Admin</option>
                            </select>
                        `,
                        didOpen: () => {
                            const passwordInput = document.getElementById('password');
                            const requirementsList = document.getElementById('password-requirements');
    
                            passwordInput.addEventListener('input', (e) => {
                                const password = e.target.value;
    
                                // Update requirements list and check if all requirements are met
                                passwordValid = passwordRequirements.every(req => req.regex.test(password));
    
                                requirementsList.innerHTML = passwordRequirements
                                    .map(req => {
                                        const isValid = req.regex.test(password);
                                        return `
                                            <li style="color: ${isValid ? '#2ecc71' : '#e74c3c'}; margin: 5px 0; font-size: 0.9em; display: flex; align-items: center;">
                                                <span style="margin-right: 5px;">${isValid ? 'âœ“' : 'Ã—'}</span>
                                                ${req.text}
                                            </li>
                                        `;
                                    })
                                    .join('');
                            });
                        },
                        focusConfirm: false,
                        showCancelButton: true,
                        confirmButtonText: 'Create',
                        showLoaderOnConfirm: true,
                        preConfirm: () => {
                            const username = document.getElementById('username').value;
                            const email = document.getElementById('email').value;
                            const password = document.getElementById('password').value;
                            const role = document.getElementById('role').value;
    
                            if (!username || !email || !password) {
                                Swal.showValidationMessage('Please fill in all fields');
                                return false;
                            }
    
                            if (!passwordValid) {
                                Swal.showValidationMessage('Password does not meet all requirements');
                                return false;
                            }
    
                            // Validate email format
                            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                            if (!emailRegex.test(email)) {
                                Swal.showValidationMessage('Please enter a valid email address');
                                return false;
                            }
    
                            return fetch('/admin/create-admin', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    username,
                                    email,
                                    password,
                                    role
                                })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (!data.success) {
                                        throw new Error(data.msg || 'Failed to create admin account');
                                    }
                                    return data;
                                })
                                .catch(error => {
                                    Swal.showValidationMessage(error.message);
                                    throw error;
                                });
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            Swal.fire({
                                title: 'Success!',
                                text: 'Admin account created successfully',
                                icon: 'success',
                                willClose: () => {
                                    // Reload page and show manage-admins section
                                    window.location.href = '/admin/dashboard#manage-admins';
                                    window.location.reload();
                                }
                            });
                        }
                    });
                });
            }
        });
    
        // Global delete functions
        window.deleteProduct = async function(productId) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            });
    
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/delete-product/${productId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
    
                    const data = await response.json();
    
                    if (data.success) {
                        await Swal.fire(
                            'Deleted!',
                            'Product has been deleted successfully.',
                            'success'
                        );
                        location.reload();
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message || 'Failed to delete product',
                            'error'
                        );
                    }
                } catch (error) {
                    Swal.fire(
                        'Error!',
                        'An error occurred while deleting the product',
                        'error'
                    );
                    console.error('Error:', error);
                }
            }
        };
    
        window.deleteAdmin = async function(adminId) {
            const result = await Swal.fire({
                title: 'Are you sure?',
                text: "This action cannot be undone!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            });
    
            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/admin/delete-admin/${adminId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
    
                    const data = await response.json();
    
                    if (data.success) {
                        await Swal.fire(
                            'Deleted!',
                            'Administrator account has been deleted.',
                            'success'
                        );
                        location.reload();
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message || 'Failed to delete administrator account',
                            'error'
                        );
                    }
                } catch (error) {
                    Swal.fire(
                        'Error!',
                        'An error occurred while deleting the administrator account',
                        'error'
                    );
                    console.error('Error:', error);
                }
            }
        };
    
        function logout() {
            window.location.href = '/api/auth/logout';
        }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>